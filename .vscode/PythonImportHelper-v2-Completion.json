[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "RGBColor",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "Pt",
        "importPath": "docx.shared",
        "description": "docx.shared",
        "isExtraImport": true,
        "detail": "docx.shared",
        "documentation": {}
    },
    {
        "label": "WD_ALIGN_PARAGRAPH",
        "importPath": "docx.enum.text",
        "description": "docx.enum.text",
        "isExtraImport": true,
        "detail": "docx.enum.text",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "waitress",
        "description": "waitress",
        "isExtraImport": true,
        "detail": "waitress",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "latest.node_modules.flatted.python.flatted",
        "description": "latest.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "latest.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "latest.node_modules.flatted.python.flatted",
        "description": "latest.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "latest.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "latest.node_modules.flatted.python.flatted",
        "description": "latest.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "latest.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "latest.node_modules.flatted.python.flatted",
        "description": "latest.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "latest.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "latest.node_modules.flatted.python.test",
        "description": "latest.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "latest.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "preprocess_question",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def preprocess_question(question):\n    \"\"\"\n    Preprocesses a question by stripping whitespace and converting to lowercase.\n    \"\"\"\n    return question.strip().lower()\ndef extract_questions_from_docx(file_path):\n    \"\"\"\n    Extracts questions from a .docx file.\n    \"\"\"\n    document = Document(file_path)",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "extract_questions_from_docx",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def extract_questions_from_docx(file_path):\n    \"\"\"\n    Extracts questions from a .docx file.\n    \"\"\"\n    document = Document(file_path)\n    questions = []\n    for paragraph in document.paragraphs:\n        text = paragraph.text.strip()\n        if not text:\n            continue  # Skip empty lines",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "find_similar_questions",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def find_similar_questions(reference_questions, all_questions, all_embeddings=None, threshold=0.60):\n    \"\"\"\n    Finds similar questions in all_questions for each question in reference_questions,\n    ensuring results are in their original form and without duplicates.\n    \"\"\"\n    results = {}\n    ref_embeddings = nlp.encode(reference_questions, convert_to_tensor=True)\n    all_embeddings = nlp.encode(all_questions, convert_to_tensor=True) if all_embeddings is None else all_embeddings\n    seen_questions = set()  # Track already processed questions to avoid duplicates\n    for i, ref_question in enumerate(reference_questions):",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/upload', methods=['POST'])\ndef upload_files():\n    if 'doc-upload' not in request.files:\n        return jsonify({'error': 'No files provided'}), 400\n    files = request.files.getlist('doc-upload')\n    if len(files) < 2:\n        return jsonify({'error': 'At least two files are required'}), 400\n    file_paths = []",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "upload_files",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def upload_files():\n    if 'doc-upload' not in request.files:\n        return jsonify({'error': 'No files provided'}), 400\n    files = request.files.getlist('doc-upload')\n    if len(files) < 2:\n        return jsonify({'error': 'At least two files are required'}), 400\n    file_paths = []\n    for file in files:\n        if file.filename.endswith(('.docx', '.doc')):\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "download_docx",
        "kind": 2,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "def download_docx():\n    data = request.json  # Expecting JSON input with results\n    # Create a new Word document\n    document = Document()\n    heading = document.add_heading(level=1)\n    heading_run = heading.add_run('Similar Questions Report')\n    heading_run.font.color.rgb = RGBColor(0, 0, 0)  # Set text color to a custom blue\n    heading_run.font.size = Pt(20)\n    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    document.add_paragraph()",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "FLASK_PORT",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "FLASK_PORT = os.getenv(\"FLASK_PORT\")  # Default to 5001 if not set\n# Initialize Flask app and enable CORS\napp = Flask(__name__)\nCORS(app)\n# Configure upload folder\nUPLOAD_FOLDER = 'uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Load NLP models\nnlp = SentenceTransformer('all-MiniLM-L6-v2')",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Configure upload folder\nUPLOAD_FOLDER = 'uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Load NLP models\nnlp = SentenceTransformer('all-MiniLM-L6-v2')\n# List of interrogative words and question-related keywords\nINTERROGATIVE_WORDS = [\"what\", \"who\", \"why\", \"how\", \"where\", \"when\", \"which\", \"whom\", \"do\", \"does\", \"did\", \"has\", \"have\", \"had\", \"is\", \"was\", \"are\", \"were\", \"am\", \"will\", \"would\", \"can\", \"could\", \"shall\", \"should\", \"may\", \"might\"]",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "UPLOAD_FOLDER = 'uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Load NLP models\nnlp = SentenceTransformer('all-MiniLM-L6-v2')\n# List of interrogative words and question-related keywords\nINTERROGATIVE_WORDS = [\"what\", \"who\", \"why\", \"how\", \"where\", \"when\", \"which\", \"whom\", \"do\", \"does\", \"did\", \"has\", \"have\", \"had\", \"is\", \"was\", \"are\", \"were\", \"am\", \"will\", \"would\", \"can\", \"could\", \"shall\", \"should\", \"may\", \"might\"]\nQUESTION_KEYWORDS = [\"explain\", \"define\", \"describe\", \"justify\", \"discuss\", \"state the\", \"analyze\", \"compare\", \"elaborate\", \"_______\", \"of the passage\", \"by the passage\", \"from the passage\", \"in the passage\", \"is the passage\", \"write\", \"find\", \"evaluate\"]\ndef preprocess_question(question):\n    \"\"\"",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Load NLP models\nnlp = SentenceTransformer('all-MiniLM-L6-v2')\n# List of interrogative words and question-related keywords\nINTERROGATIVE_WORDS = [\"what\", \"who\", \"why\", \"how\", \"where\", \"when\", \"which\", \"whom\", \"do\", \"does\", \"did\", \"has\", \"have\", \"had\", \"is\", \"was\", \"are\", \"were\", \"am\", \"will\", \"would\", \"can\", \"could\", \"shall\", \"should\", \"may\", \"might\"]\nQUESTION_KEYWORDS = [\"explain\", \"define\", \"describe\", \"justify\", \"discuss\", \"state the\", \"analyze\", \"compare\", \"elaborate\", \"_______\", \"of the passage\", \"by the passage\", \"from the passage\", \"in the passage\", \"is the passage\", \"write\", \"find\", \"evaluate\"]\ndef preprocess_question(question):\n    \"\"\"\n    Preprocesses a question by stripping whitespace and converting to lowercase.\n    \"\"\"",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "nlp = SentenceTransformer('all-MiniLM-L6-v2')\n# List of interrogative words and question-related keywords\nINTERROGATIVE_WORDS = [\"what\", \"who\", \"why\", \"how\", \"where\", \"when\", \"which\", \"whom\", \"do\", \"does\", \"did\", \"has\", \"have\", \"had\", \"is\", \"was\", \"are\", \"were\", \"am\", \"will\", \"would\", \"can\", \"could\", \"shall\", \"should\", \"may\", \"might\"]\nQUESTION_KEYWORDS = [\"explain\", \"define\", \"describe\", \"justify\", \"discuss\", \"state the\", \"analyze\", \"compare\", \"elaborate\", \"_______\", \"of the passage\", \"by the passage\", \"from the passage\", \"in the passage\", \"is the passage\", \"write\", \"find\", \"evaluate\"]\ndef preprocess_question(question):\n    \"\"\"\n    Preprocesses a question by stripping whitespace and converting to lowercase.\n    \"\"\"\n    return question.strip().lower()\ndef extract_questions_from_docx(file_path):",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "INTERROGATIVE_WORDS",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "INTERROGATIVE_WORDS = [\"what\", \"who\", \"why\", \"how\", \"where\", \"when\", \"which\", \"whom\", \"do\", \"does\", \"did\", \"has\", \"have\", \"had\", \"is\", \"was\", \"are\", \"were\", \"am\", \"will\", \"would\", \"can\", \"could\", \"shall\", \"should\", \"may\", \"might\"]\nQUESTION_KEYWORDS = [\"explain\", \"define\", \"describe\", \"justify\", \"discuss\", \"state the\", \"analyze\", \"compare\", \"elaborate\", \"_______\", \"of the passage\", \"by the passage\", \"from the passage\", \"in the passage\", \"is the passage\", \"write\", \"find\", \"evaluate\"]\ndef preprocess_question(question):\n    \"\"\"\n    Preprocesses a question by stripping whitespace and converting to lowercase.\n    \"\"\"\n    return question.strip().lower()\ndef extract_questions_from_docx(file_path):\n    \"\"\"\n    Extracts questions from a .docx file.",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    },
    {
        "label": "QUESTION_KEYWORDS",
        "kind": 5,
        "importPath": "uploaded_files.abcd",
        "description": "uploaded_files.abcd",
        "peekOfCode": "QUESTION_KEYWORDS = [\"explain\", \"define\", \"describe\", \"justify\", \"discuss\", \"state the\", \"analyze\", \"compare\", \"elaborate\", \"_______\", \"of the passage\", \"by the passage\", \"from the passage\", \"in the passage\", \"is the passage\", \"write\", \"find\", \"evaluate\"]\ndef preprocess_question(question):\n    \"\"\"\n    Preprocesses a question by stripping whitespace and converting to lowercase.\n    \"\"\"\n    return question.strip().lower()\ndef extract_questions_from_docx(file_path):\n    \"\"\"\n    Extracts questions from a .docx file.\n    \"\"\"",
        "detail": "uploaded_files.abcd",
        "documentation": {}
    }
]